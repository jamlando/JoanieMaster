# Resend Configuration Template for Production
# Copy this file to Config/Secrets.swift and fill in your actual values
# Never commit Config/Secrets.swift to version control
# Use environment variables for production deployment

import Foundation

struct Secrets {
    // Supabase Configuration
    static let supabaseURL = ProcessInfo.processInfo.environment["SUPABASE_URL"] ?? "https://your-project-id.supabase.co"
    static let supabaseAnonKey = ProcessInfo.processInfo.environment["SUPABASE_ANON_KEY"] ?? "your-anon-key-here"
    static let supabaseServiceRoleKey = ProcessInfo.processInfo.environment["SUPABASE_SERVICE_ROLE_KEY"] ?? "your-service-role-key-here"
    
    // AI API Keys
    static let openAIAPIKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] ?? "your-openai-api-key-here"
    static let xAIAPIKey = ProcessInfo.processInfo.environment["XAI_API_KEY"] ?? "your-xai-api-key-here"
    
    // Resend Email Service Configuration
    static let resendAPIKey = ProcessInfo.processInfo.environment["RESEND_API_KEY"] ?? "your-resend-api-key-here"
    static let resendDomain = ProcessInfo.processInfo.environment["RESEND_DOMAIN"] ?? "yourdomain.com"
    static let emailServiceProvider = ProcessInfo.processInfo.environment["EMAIL_SERVICE_PROVIDER"] ?? "resend"
    static let emailFromAddress = ProcessInfo.processInfo.environment["EMAIL_FROM_ADDRESS"] ?? "noreply@yourdomain.com"
    static let emailFromName = ProcessInfo.processInfo.environment["EMAIL_FROM_NAME"] ?? "YourAppName"
    
    // Production Email Configuration
    static let resendAPIBaseURL = ProcessInfo.processInfo.environment["RESEND_API_BASE_URL"] ?? "https://api.resend.com"
    static let resendTimeoutSeconds = Int(ProcessInfo.processInfo.environment["RESEND_TIMEOUT_SECONDS"] ?? "45") ?? 45
    static let resendMaxRetries = Int(ProcessInfo.processInfo.environment["RESEND_MAX_RETRIES"] ?? "5") ?? 5
    static let resendEnableSSL = ProcessInfo.processInfo.environment["RESEND_ENABLE_SSL"] != "false" // Default true
    
    // Email Routing Configuration
    static let resendMarketingFromAddress = ProcessInfo.processInfo.environment["RESEND_MARKETING_FROM"] ?? "hello@yourdomain.com"
    static let resendSupportFromAddress = ProcessInfo.processInfo.environment["RESEND_SUPPORT_FROM"] ?? "support@yourdomain.com"
    static let resendNoReplyFromAddress = ProcessInfo.processInfo.environment["RESEND_NOREPLY_FROM"] ?? "noreply@yourdomain.com"
    
    // Feature Flags
    static let resendEmailEnabled = ProcessInfo.processInfo.environment["RESEND_EMAIL_ENABLED"] == "true"
    static let emailFallbackEnabled = ProcessInfo.processInfo.environment["EMAIL_FALLBACK_ENABLED"] == "true"
    
    // App Configuration
    static let appEnvironment = ProcessInfo.processInfo.environment["APP_ENVIRONMENT"] ?? "development"
    static let debugMode = ProcessInfo.processInfo.environment["DEBUG_MODE"] == "true"
    
    // Production Environment Detection
    static var isProduction: Bool {
        return appEnvironment == "production" || appEnvironment == "release"
    }
}

// MARK: - Email Type Enum
enum EmailType: String, CaseIterable {
    case marketing = "marketing"
    case newsletter = "newsletter"
    case support = "support"
    case customerService = "customer_service"
    case passwordReset = "password_reset"
    case accountVerification = "account_verification"
    case notification = "notification"
    case welcome = "welcome"
    case general = "general"
}

// MARK: - Email Configuration Helper
struct EmailConfiguration {
    static var resendConfig: ResendConfiguration {
        return ResendConfiguration(
            apiKey: Secrets.resendAPIKey,
            domain: Secrets.resendDomain,
            fromEmail: Secrets.emailFromAddress,
            fromName: Secrets.emailFromName,
            apiBaseURL: Secrets.resendAPIBaseURL,
            timeoutSeconds: Secrets.resendTimeoutSeconds,
            maxRetries: Secrets.resendMaxRetries
        )
    }
    
    static var isResendEnabled: Bool {
        return Secrets.resendEmailEnabled && !Secrets.resendAPIKey.isEmpty && Secrets.resendAPIKey != "your-resend-api-key-here"
    }
    
    static var isFallbackEnabled: Bool {
        return Secrets.emailFallbackEnabled
    }
    
    static var isValidConfiguration: Bool {
        return resendConfig.isValid || !isResendEnabled
    }
    
    /// Get the appropriate "from" email address for the given email type
    static func getFromAddress(for emailType: EmailType) -> String {
        switch emailType {
        case .marketing, .newsletter:
            return Secrets.resendMarketingFromAddress
        case .support, .customerService:
            return Secrets.resendSupportFromAddress
        case .passwordReset, .accountVerification, .notification:
            return Secrets.resendNoReplyFromAddress
        case .welcome, .general:
            return Secrets.emailFromAddress
        }
    }
    
    /// Validate production configuration requirements
    static var productionValidationIssues: [String] {
        var issues: [String] = []
        
        if Secrets.isProduction {
            if Secrets.resendAPIKey == "your-resend-api-key-here" || Secrets.resendAPIKey.isEmpty {
                issues.append("RESEND_API_KEY must be set for production")
            }
            
            if Secrets.resendDomain == "joanie.app" && !Secrets.resendDomain.hasSuffix(".amvdhbl.app") {
                issues.append("RESEND_DOMAIN should use your custom domain for production")
            }
            
            if Secrets.appEnvironment == "development" {
                issues.append("APP_ENVIRONMENT should be 'production' for production deployment")
            }
            
            // Check SSL configuration
            if !Secrets.resendEnableSSL {
                issues.append("RESEND_ENABLE_SSL should be true for production")
            }
            
            // Validate timeout settings
            if Secrets.resendTimeoutSeconds < 30 {
                issues.append("RESEND_TIMEOUT_SECONDS should be at least 30 for production")
            }
        }
        
        return issues
    }
}
