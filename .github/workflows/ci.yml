name: CI

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging
        
    - name: Build project
      run: |
        xcodebuild -project Joanie.xcodeproj \
          -scheme Joanie \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
          -configuration Debug \
          clean build
          
    - name: Run tests
      run: |
        xcodebuild -project Joanie.xcodeproj \
          -scheme Joanie \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
          -configuration Debug \
          test
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          DerivedData/Logs/Test/
          *.xcresult
          
  lint:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging --strict
        
  security-scan:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Check for hardcoded secrets
        if grep -r "sk-" . --exclude-dir=.git --exclude-dir=DerivedData; then
          echo "Potential API key found in code"
          exit 1
        fi
        
        # Check for TODO/FIXME comments that might indicate security issues
        if grep -r "TODO.*security\|FIXME.*security" . --exclude-dir=.git --exclude-dir=DerivedData; then
          echo "Security-related TODO/FIXME found"
          exit 1
        fi
