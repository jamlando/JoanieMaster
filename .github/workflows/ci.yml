name: CI

on:
  push:
    branches: [ main, develop, staging, feature/* ]
  pull_request:

jobs:
  build:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
      
    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Clear Swift Package Manager cache
      run: |
        # Clear any cached Swift Package Manager data that might cause issues
        rm -rf ~/Library/Developer/Xcode/DerivedData
        rm -rf ~/Library/Caches/org.swift.swiftpm
          
    - name: Create Secrets.swift for CI
      run: |
        # Create Config directory if it doesn't exist
        mkdir -p Joanie/Config
        
        # Create Secrets.swift for CI build with placeholder values
        cat > Joanie/Config/Secrets.swift << 'EOF'
        import Foundation

        struct Secrets {
            // MARK: - Supabase Configuration
            // SECURITY: Use environment variables in production
            static let supabaseURL = ProcessInfo.processInfo.environment["SUPABASE_URL"] ?? "https://your-project-id.supabase.co"
            static let supabaseAnonKey = ProcessInfo.processInfo.environment["SUPABASE_ANON_KEY"] ?? "your-anon-key-here"
            static let supabaseServiceRoleKey = ProcessInfo.processInfo.environment["SUPABASE_SERVICE_ROLE_KEY"] ?? "your-service-role-key-here"
            
            // MARK: - AI API Keys
            // SECURITY: Use environment variables in production
            static let openAIAPIKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] ?? "your-openai-api-key-here"
            static let xAIAPIKey = ProcessInfo.processInfo.environment["XAI_API_KEY"] ?? "your-xai-api-key-here"
            
            // MARK: - Email Service Configuration
            // SECURITY: Use environment variables in production
            static let resendAPIKey = ProcessInfo.processInfo.environment["RESEND_API_KEY"] ?? "your-resend-api-key-here"
            static let resendDomain = ProcessInfo.processInfo.environment["RESEND_DOMAIN"] ?? "whalesharksolutions.com"
            static let emailServiceProvider = ProcessInfo.processInfo.environment["EMAIL_SERVICE_PROVIDER"] ?? "resend"
            static let emailFromAddress = ProcessInfo.processInfo.environment["EMAIL_FROM_ADDRESS"] ?? "noreply@whalesharksolutions.com"
            static let emailFromName = ProcessInfo.processInfo.environment["EMAIL_FROM_NAME"] ?? "Joanie"
            
            // MARK: - Resend API Configuration
            static let resendAPIBaseURL = ProcessInfo.processInfo.environment["RESEND_API_BASE_URL"] ?? "https://api.resend.com"
            static let resendTimeoutSeconds = Int(ProcessInfo.processInfo.environment["RESEND_TIMEOUT_SECONDS"] ?? "30") ?? 30
            static let resendMaxRetries = Int(ProcessInfo.processInfo.environment["RESEND_MAX_RETRIES"] ?? "3") ?? 3
            static let resendEnableSSL = ProcessInfo.processInfo.environment["RESEND_ENABLE_SSL"] != "false" // Default true
            
            // MARK: - Email Address Configuration
            static let resendMarketingFromAddress = ProcessInfo.processInfo.environment["RESEND_MARKETING_FROM"] ?? "hello@whalesharksolutions.com"
            static let resendSupportFromAddress = ProcessInfo.processInfo.environment["RESEND_SUPPORT_FROM"] ?? "support@whalesharksolutions.com"
            static let resendNoReplyFromAddress = ProcessInfo.processInfo.environment["RESEND_NOREPLY_FROM"] ?? "noreply@whalesharksolutions.com"
            
            // MARK: - Email Service Flags
            static let resendEmailEnabled = ProcessInfo.processInfo.environment["RESEND_EMAIL_ENABLED"] == "true"
            static let emailFallbackEnabled = ProcessInfo.processInfo.environment["EMAIL_FALLBACK_ENABLED"] == "true"
            
            // MARK: - App Configuration
            // SECURITY: Use environment variables in production
            static let appEnvironment = ProcessInfo.processInfo.environment["APP_ENVIRONMENT"] ?? "development"
            static let debugMode = ProcessInfo.processInfo.environment["DEBUG_MODE"] == "true"
            
            // MARK: - Computed Properties
            static var isProduction: Bool {
                return appEnvironment.lowercased() == "production"
            }
        }
        EOF
        
    - name: Build project
      run: |
        # Set up build environment
        export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
        export DERIVED_DATA_PATH=/tmp/DerivedData
        
        # Create derived data directory with proper permissions
        mkdir -p $DERIVED_DATA_PATH
        chmod 755 $DERIVED_DATA_PATH
        
        xcodebuild -project Joanie.xcodeproj \
          -scheme Joanie \
          -destination 'generic/platform=iOS Simulator' \
          -configuration Debug \
          -derivedDataPath $DERIVED_DATA_PATH \
          clean build
          
  lint:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging
        
  security-scan:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Check for hardcoded secrets (excluding config files that contain patterns for detection)
        if grep -r "sk-" . --exclude-dir=.git --exclude-dir=DerivedData --exclude=".swiftlint.yml" --exclude=".github" --exclude="*.yml"; then
          echo "Potential API key found in code"
          exit 1
        fi
        
        # Check for TODO/FIXME comments that might indicate security issues
        if grep -r "TODO.*security\|FIXME.*security" . --exclude-dir=.git --exclude-dir=DerivedData --exclude=".github" --exclude="*.yml"; then
          echo "Security-related TODO/FIXME found"
          exit 1
        fi
        
        echo "Security scan passed - no hardcoded secrets or security TODOs found"
